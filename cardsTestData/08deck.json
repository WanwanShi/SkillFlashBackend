[
  {
    "Q": "What is React Native, and how does it differ from traditional mobile development? ",
    "A": "React Native is a framework for building native mobile apps using JavaScript. It allows developers to create mobile applications for iOS and Android using React and JavaScript, providing a native app experience without requiring native language expertise. (Source: React Native Documentation)",
    "tag": "react-native",
    "Y": 0,
    "N": 0,
    "card_id": 1716193845566
  },
  {
    "Q": "How does React Native bridge the gap between web and mobile development?",
    "A": "React Native provides a React-based framework that abstracts the underlying platform details, allowing web developers to reuse their JavaScript and React skills. It offers a consistent development experience and code reuse across web and mobile platforms. (Source: React Native Documentation)",
    "tag": "react-native",
    "Y": 0,
    "N": 0,
    "card_id": 1716193845566
  },
  {
    "Q": "Explain the concept of 'Learn Once, Write Anywhere' in the context of React Native.",
    "A": "'Learn Once, Write Anywhere' is a principle of React Native, emphasizing code reuse and cross-platform development. It means that developers can learn React and JavaScript once and then use their skills to write code that can run on multiple platforms, including web, iOS, and Android. (Source: React Native Documentation)",
    "tag": "react-native",
    "Y": 0,
    "N": 0,
    "card_id": 1716193845566
  },
  {
    "Q": "How does React Native compare to other hybrid mobile development frameworks?",
    "A": "React Native stands out by offering true native performance and access to native platform capabilities. It provides a better user experience and more flexibility than hybrid frameworks, as it compiles directly to native code, resulting in faster and more responsive apps. (Source: React Native Comparison)",
    "tag": "react-native",
    "Y": 0,
    "N": 0,
    "card_id": 1716193845566
  },
  {
    "Q": "What is Scrum, and what are its key principles? ",
    "A": "Scrum is an agile project management framework that focuses on iterative and incremental development. Its key principles include empirical process control, self-organization, collaboration, time-boxing, and continuous improvement through feedback loops. (Source: Scrum Guide)",
    "tag": "scrum",
    "Y": 0,
    "N": 0,
    "card_id": 1716193845566
  },
  {
    "Q": "Explain the three roles defined in Scrum: Product Owner, Scrum Master, and Development Team.",
    "A": "In Scrum, the Product Owner is responsible for maximizing the value of the product and managing the product backlog. The Scrum Master ensures that Scrum is understood and enacted, coaching the team and removing impediments. The Development Team delivers potentially shippable increments of the product through iterative development. (Source: Scrum Guide)",
    "tag": "scrum",
    "Y": 0,
    "N": 0,
    "card_id": 1716193845566
  },
  {
    "Q": "How does Scrum ensure transparency and inspection throughout the development process?",
    "A": "Scrum promotes transparency by using artifacts like the product backlog, sprint backlog, and the resulting increment. These artifacts are transparent and accessible, providing a clear view of progress and enabling regular inspections to occur during events like the Daily Scrum and Sprint Review. (Source: Scrum Guide)",
    "tag": "scrum",
    "Y": 0,
    "N": 0,
    "card_id": 1716193845566
  },
  {
    "Q": "What is the purpose of the Daily Scrum event, and who participates in it? ",
    "A": "The Daily Scrum is a short, time-boxed event held every day of a Sprint. It is attended by the Development Team to inspect progress toward the Sprint Goal, adapt the plan for the rest of the Sprint, and identify any impediments. It promotes collaboration, transparency, and self-organization within the team. (Source: Scrum Guide)",
    "tag": "scrum",
    "Y": 0,
    "N": 0,
    "card_id": 1716193845566
  },
  {
    "Q": "How does Scrum handle changes and evolving requirements during a project? ",
    "A": "Scrum embraces change through its iterative and incremental nature. Changes and new requirements are managed through the product backlog, which is regularly reviewed and reprioritized. The product backlog reflects the latest understanding of what is needed, and the team adapts its plan during each Sprint to incorporate changes. (Source: Scrum Guide)",
    "tag": "scrum",
    "Y": 0,
    "N": 0,
    "card_id": 1716193845566
  },
  {
    "Q": "What is Agile, and what are the core values and principles that guide Agile software development? ",
    "A": "Agile is an iterative and collaborative approach to software development that promotes adaptability and customer satisfaction. Its core values include individuals and interactions over processes and tools, working software over comprehensive documentation, customer collaboration over contract negotiation, and responding to change over following a plan. (Source: Agile Manifesto)",
    "tag": "agile",
    "Y": 0,
    "N": 0,
    "card_id": 1716193845566
  },
  {
    "Q": "Explain the concept of 'embracing change' in Agile, and how it benefits software development.",
    "A": "Embracing change is a fundamental principle of Agile, recognizing that change is inevitable and can bring competitive advantage. Agile methods facilitate change by encouraging short feedback loops, iterative development, and close collaboration with stakeholders, resulting in more flexible and responsive software solutions. (Source: Agile Manifesto)",
    "tag": "agile",
    "Y": 0,
    "N": 0,
    "card_id": 1716193845566
  },
  {
    "Q": "How does Agile promote collaboration and communication within development teams? ",
    "A": "Agile emphasizes face-to-face communication, ensuring that team members interact regularly and directly. Practices like co-location, daily stand-up meetings, and collaborative planning sessions foster a culture of collaboration, ensuring that everyone understands the shared goal and works together effectively. (Source: Agile Manifesto, Agile Principles)",
    "tag": "agile",
    "Y": 0,
    "N": 0,
    "card_id": 1716193845566
  },
  {
    "Q": "What is the difference between Agile and Waterfall development methodologies?",
    "A": "Agile and Waterfall differ significantly in their approaches. Waterfall follows a linear, sequential process with distinct phases, emphasizing up-front planning and documentation. In contrast, Agile is iterative, flexible, and responsive, focusing on delivering working software in short cycles and adapting to change. (Source: Agile Alliance)",
    "tag": "agile",
    "Y": 0,
    "N": 0,
    "card_id": 1716193845566
  },
  {
    "Q": "How does Agile facilitate continuous improvement and learning within software teams?",
    "A": "Agile encourages teams to reflect on their processes and outcomes regularly and identify areas for improvement. Through practices like retrospectives and continuous feedback loops, teams can inspect and adapt their processes, tools, and techniques, fostering a culture of continuous learning and improvement. (Source: Agile Principles)",
    "tag": "agile",
    "Y": 0,
    "N": 0,
    "card_id": 1716193845566
  },
  {
    "Q": "What is the concept of 'YAGNI' in Agile, and how does it guide development practices? ",
    "A": `'YAGNI' stands for "You Ain't Gonna Need It." It's an Agile principle that encourages developers to only implement features and functionality that are currently needed, avoiding speculative development and unnecessary work. This mindset helps keep the codebase lean and focused on delivering value. (Source: Extreme Programming)`,
    "tag": "agile",
    "Y": 0,
    "N": 0,
    "card_id": 1716193845566
  },
  {
    "Q": "How does Agile promote 'early and continuous delivery of valuable software'?",
    "A": "Agile emphasizes delivering working software to stakeholders early and frequently. Through short development cycles and iterative refinement, Agile teams can gather feedback, validate assumptions, and deliver value incrementally, ensuring that the software aligns with evolving customer needs. (Source: Agile Manifesto, Agile Principles)",
    "tag": "agile",
    "Y": 0,
    "N": 0,
    "card_id": 1716193845566
  },
  {
    "Q": "What is the role of the 'Product Owner' in an Agile context, and how do they guide the development team? ",
    "A": "The Product Owner is responsible for maximizing the value of the product resulting from the development team's work. They do this by maintaining and prioritizing the product backlog, ensuring that the team understands the business context, and guiding the team toward delivering the most valuable features first. (Source: Scrum Guide, Agile Principles)",
    "tag": "agile",
    "Y": 0,
    "N": 0,
    "card_id": 1716193845566
  },
  {
    "Q": "How does Agile encourage sustainable development practices and a healthy work environment?",
    "A": "Agile promotes sustainable development by advocating for a steady pace, reasonable work hours, and well-being. It emphasizes that consistent, long-term productivity is achieved through a balanced approach, where teams are empowered to maintain a sustainable pace without overworking or burning out. (Source: Agile Principles)",
    "tag": "agile",
    "Y": 0,
    "N": 0,
    "card_id": 1716193845566
  },
  {
    "Q": "What is the impact of Agile on software quality, and how does it ensure high standards?",
    "A": "Agile improves software quality by emphasizing testing early and often. Through practices like test-driven development, continuous integration, and pair programming, Agile teams catch issues early, integrate changes frequently, and benefit from collective code ownership, resulting in higher-quality software. (Source: Agile Alliance, Agile Principles)",
    "tag": "agile",
    "Y": 0,
    "N": 0,
    "card_id": 1716193845566
  }
]
