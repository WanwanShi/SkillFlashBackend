{
	"GET /api": {
		"description": "serves up a json representation of all the available endpoints of the api"
	},
	"GET /api/tags": {
		"description": "serves an array of all tags",
		"query": ["tagCategory"],
		"exampleResponse": {
			"tags": [
				{
					"_id": "664b46f82c0e05e0e615dd9f",
					"tagName": "JavaScript",
					"tagCategory": "technical-skills"
				},
				{
					"_id": "664b46f82c0e05e0e615dda0",
					"tagName": "Python",
					"tagCategory": "technical-skills"
				},
				{
					"_id": "664b46f82c0e05e0e615ddd0",
					"tagName": "Testing Techniques",
					"tagCategory": "practical-knowledge"
				}
			]
		},
		"errorResponse": [
			{"GET 400": {"message": "Invalid query"}}
		]
	},
	"POST /api/users/signup": {
		"description": "serves a newly created user object with username,email and userId.",
		"query": [],
		"exampleResponse": {
			"_id": "664c54c9f9398e48bdfa372a",
			"username": "test1",
			"email": "test1@gmail.com"
		},
		"errorResponse": [
			{"POST 400": {"message": "failed to signup"}}
		]
	},
	"POST /api/users/login": {
		"description": "serves an exist user object",
		"query": [],
		"exampleResponse": {
			"_id": "664c54c9f9398e48bdfa372a",
			"username": "test1",
			"email": "test1@gmail.com"
		},
		"errorResponse": [
			{"POST 404": {"message": "username does not exist"}},
			{"POST 400": {"message": "username and password does not match"}}
		]
	},
	"GET /api/users/:username": {
		"description": "serves a boolean value of the existence of the username",
		"query": [],
		"exampleResponse": {
			"exist": true
		}
	},
	"GET /api/decks/:username": {
		"description": "serves an array of decks for specific user",
        "query": [],
        "exampleResponse": {
            "decks": [
                {
					"card_id": 1,
					"Q": "How does Django REST Framework handle authentication and permissions?",
					"A": "Django REST Framework offers a flexible authentication system that integrates with various authentication backends, including tokens, sessions, and OAuth. It also provides fine-grained permission controls, allowing developers to restrict access to specific views or functionality. (Source: Django REST Framework Authentication Documentation)",
					"tag": "python",
					"Y": 0,
					"N": 0
				  },
				  {
					"card_id": 2,
					"Q": "What is type hinting in Python, and how does it improve code quality?",
					"A": "Type hinting in Python involves adding annotations to variables and function arguments to specify their expected types. This improves code quality by enabling static type checking, providing better documentation, and facilitating IDE auto-completion and refactoring. (Source: Python Type Hinting Documentation)",
					"tag": "python",
					"Y": 0,
					"N": 0
				  }
            ]
        },
        "errorResponse": [
            {"GET 404": {"message": "username does not exist"}},
			{"GET 400": {"message": "no username provided"}}
        ]
	}
}
