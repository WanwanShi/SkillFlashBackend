[
  {
    "Q": "What is Next.js, and how does it extend the capabilities of React? ",
    "A": "Next.js is a production-ready web framework built on top of React. It provides features like server-side rendering, static site generation, API routes, and file-system routing, making it easier to build performant and SEO-friendly web applications. (Source: Next.js Documentation)",
    "tag": "nextjs",
    "Y": 0,
    "N": 0,
    "card_id": 1716193391161
  },
  {
    "Q": "How does Next.js handle routing, and what benefits does it offer over traditional client-side routing?",
    "A": "Next.js uses a file-system-based routing system, where each page has a corresponding .js file. This approach enables automatic routing and pre-rendering, improving SEO and providing a better user experience by serving static pages when possible. (Source: Next.js Routing Documentation)",
    "tag": "nextjs",
    "Y": 0,
    "N": 0,
    "card_id": 1716193391161
  },
  {
    "Q": "What is data fetching in Next.js, and how does it improve performance and user experience?",
    "A": "Data fetching in Next.js allows you to fetch data required for a page during the rendering phase. With features like client and server-side data fetching, and automatic client-side caching, Next.js improves performance and reduces the need for client-side data retrieval. (Source: Next.js Data Fetching Documentation)",
    "tag": "nextjs",
    "Y": 0,
    "N": 0,
    "card_id": 1716193391161
  },
  {
    "Q": "How does Next.js handle authentication and authorization, and what tools or libraries does it integrate with?",
    "A": "Next.js provides built-in support for authentication, including cookie and session-based approaches. It integrates seamlessly with popular authentication libraries like NextAuth and Supabase, offering a range of strategies to secure user access. (Source: Next.js Authentication Documentation)",
    "tag": "nextjs",
    "Y": 0,
    "N": 0,
    "card_id": 1716193391161
  },
  {
    "Q": "What is Java, and why is it considered a robust and versatile programming language? ",
    "A": "Java is a high-level, object-oriented programming language known for its portability, robustness, and extensive standard library. It enables developers to write once and run anywhere (WORA), making it widely used for building enterprise applications and mobile apps. (Source: Oracle Java Documentation)",
    "tag": "java",
    "Y": 0,
    "N": 0,
    "card_id": 1716193391161
  },
  {
    "Q": "Explain the concept of garbage collection in Java and its benefits for memory management.",
    "A": "Garbage collection in Java is a process that automatically reclaims memory occupied by objects that are no longer reachable or in use. It relieves developers from manual memory management, reducing memory leaks and improving overall application stability. (Source: Oracle Java Documentation)",
    "tag": "java",
    "Y": 0,
    "N": 0,
    "card_id": 1716193391161
  },
  {
    "Q": "How does Java handle concurrency and multithreading, and what are some common techniques or frameworks used?",
    "A": "Java provides built-in support for multithreading and concurrency through features like threads, locks, and the Java Memory Model. Common techniques include the use of thread pools, the Executor framework, and concurrency utilities like ConcurrentHashMap. (Source: Oracle Java Concurrency Documentation)",
    "tag": "java",
    "Y": 0,
    "N": 0,
    "card_id": 1716193391161
  },
  {
    "Q": "What is Spring, and how does it enhance the development of Java applications? ",
    "A": "Spring is a popular Java framework that provides comprehensive infrastructure support for developing enterprise-grade applications. It offers modules for dependency injection, data access, security, and web development, simplifying the development and testing process. (Source: Spring Framework Documentation)",
    "tag": "java",
    "Y": 0,
    "N": 0,
    "card_id": 1716193391161
  },
  {
    "Q": "Explain the concept of dependency injection and how it's implemented in Spring.",
    "A": "Dependency injection is a design pattern that promotes loose coupling by injecting dependencies into a class, rather than the class creating them. Spring uses XML configuration or annotations to define and manage these dependencies, making it easier to test and maintain applications. (Source: Spring Dependency Injection Documentation)",
    "tag": "java",
    "Y": 0,
    "N": 0,
    "card_id": 1716193391161
  },
  {
    "Q": "What is Hibernate, and how does it simplify data persistence in Java applications? ",
    "A": "Hibernate is a powerful object-relational mapping (ORM) framework for Java. It provides a way to map Java classes to database tables and handles data persistence and retrieval, abstracting the complexity of SQL and providing a higher-level API. (Source: Hibernate ORM Documentation)",
    "tag": "java",
    "Y": 0,
    "N": 0,
    "card_id": 1716193391161
  },
  {
    "Q": "What is Vue.js, and what are its key features? ",
    "A": "Vue.js is a progressive JavaScript framework for building user interfaces. It offers a simple and flexible API, providing reactive and composable data binding, reusable components, and a lightweight core, making it easy to adopt and scale in complexity as needed. (Source: Vue.js Documentation)",
    "tag": "vue",
    "Y": 0,
    "N": 0,
    "card_id": 1716193391161
  },
  {
    "Q": "How does Vue.js handle state management, and what tools or libraries does it offer?",
    "A": "Vue.js provides a built-in state management system called Vuex, which serves as a centralized store for application-level state. It offers features like state tracking, mutations, and actions, providing a predictable and structured way to manage state across components. (Source: Vuex Documentation)",
    "tag": "vue",
    "Y": 0,
    "N": 0,
    "card_id": 1716193391161
  },
  {
    "Q": "What is the Virtual DOM in Vue.js, and how does it improve performance?",
    "A": "The Virtual DOM in Vue.js is a representation of the actual DOM, allowing Vue to efficiently calculate the minimum number of DOM operations needed to update the UI when state changes. This process improves performance and enables smooth transitions in dynamic applications. (Source: Vue.js Guide)",
    "tag": "vue",
    "Y": 0,
    "N": 0,
    "card_id": 1716193391161
  },
  {
    "Q": "How does Vue.js handle routing, and what benefits does it offer for single-page applications? ",
    "A": "Vue.js provides a built-in router that enables client-side routing in single-page applications. It offers features like nested routes, route parameters, and navigation guards, making it easy to build complex SPAs with seamless navigation. (Source: Vue Router Documentation)",
    "tag": "vue",
    "Y": 0,
    "N": 0,
    "card_id": 1716193391161
  },
  {
    "Q": "What is Vue's reactivity system, and how does it keep the view and data in sync?",
    "A": "Vue's reactivity system automatically tracks dependencies and reacts to data changes, updating the view accordingly. It uses getters and setters to proxy data access, enabling efficient reactivity and ensuring the view reflects any changes in the underlying data. (Source: Vue Reactivity Guide)",
    "tag": "vue",
    "Y": 0,
    "N": 0,
    "card_id": 1716193391161
  },
  {
    "Q": "How does Vue handle forms and input validation, and what tools or libraries does it offer?",
    "A": "Vue provides built-in support for handling forms and input validation through directives like v-model and custom validators. It also integrates with popular validation libraries like VeeValidate, offering a range of tools to manage form state and user input. (Source: Vue Forms Guide, VeeValidate Documentation)",
    "tag": "vue",
    "Y": 0,
    "N": 0,
    "card_id": 1716193391161
  },
  {
    "Q": "What is Nuxt.js, and how does it enhance the development of Vue.js applications? ",
    "A": "Nuxt.js is a meta-framework for Vue.js that provides a higher-level development experience. It offers features like server-side rendering, static site generation, and code splitting out-of-the-box, simplifying the configuration and development of performant Vue applications. (Source: Nuxt.js Documentation)",
    "tag": "vue",
    "Y": 0,
    "N": 0,
    "card_id": 1716193391161
  },
  {
    "Q": "How does Nuxt.js improve SEO and performance in Vue.js applications?",
    "A": "Nuxt.js improves SEO by generating static HTML pages that can be indexed by search engines. It also provides built-in optimization features like automatic code splitting and lazy loading, improving performance and reducing the initial load time of Vue applications. (Source: Nuxt.js SEO and Performance Documentation)",
    "tag": "vue",
    "Y": 0,
    "N": 0,
    "card_id": 1716193391161
  },
  {
    "Q": "What is the role of Vue Server-Side Rendering (SSR) and how does Nuxt.js facilitate it?",
    "A": "Vue SSR involves rendering Vue components on the server and sending the generated HTML to the client. Nuxt.js simplifies SSR by providing a configuration-based setup, automatic client-server hydration, and built-in support for generating static sites with Vue components. (Source: Nuxt.js SSR Documentation)",
    "tag": "vue",
    "Y": 0,
    "N": 0,
    "card_id": 1716193391161
  },
  {
    "Q": "How does Nuxt.js handle routing and navigation, and what benefits does it offer over manual routing?",
    "A": "Nuxt.js offers a file-based routing system, automatically generating routes based on the file structure. It provides features like nested routes, dynamic route parameters, and async data fetching, simplifying the process of building complex applications and improving developer productivity. (Source: Nuxt.js Routing Documentation)",
    "tag": "vue",
    "Y": 0,
    "N": 0,
    "card_id": 1716193391161
  }
]
